This document is to help me navigate and quickly skim through the LMS.

~~~~~~~~~~~~

Contents and/or Brief Summary of Each Section:

THE BASICS:
getting started:
    welcome to hello world
    hello world
    project and apps
    investigating urls
    inside a view
    what just happened

deplying to heroku:
    deploying to heroku
    inside settings.py
    inside requirements.txt
    what just happened

I THINK THEREFORE I BLOG:
Getting set up:
    userstories in github projects
    create the project and blog app   
    deploy to heroku

Models part 1:
    overview of models
    creating the database
    databases and deployment
    building the post model
    models
    model relationships
    inside migrations
    inside admin.py
    add users and blog posts
    what just happened?

Code it yourself: Models:
    plan the comments model
    implement the comments model
    run migrations and update admin.py

Models part 2:
        there's methods in our models
        add methods tothe comment model

Debugging your database:
    Debugging your database

Views part 1:
    Intro to views
    building the homepage with Django generic views
    inside the list view
    importing urls
    what just happened

Rich text and reload:
    admin panel power up
    admin panel customization
    adding more posts
Templates:
    the django template language
    the base template and homepage
    template inheritance
    variables and control structures
    pagination
    deployment with static files
    what are static files?
    what just happened?

Views part 2:
    more advanced views
    building a blog post view
    url arguments
    inside a standard view
    template context
    what just happened

Code it yourself:
    plan new app
    create the about app
    evaluate your appa against user stories

Authentication:
    intro to authentication
    django allauth
    restricting access
    custom templates
    what just happened?

Views Part 3:
    accepting POST requests
    POSTing and writing to the database
    deeper dive into relationships
    conditional comments
    creating a django form
    handling a POST request
    create the collaboration request form
    handling the form POST request
    editing and deleting records
    the edit and delete views
    handling edit and delete buttons with javascript
    what just happened

Where to put things:
    introduction to storage
    storing images on cloudinary
    storing user-generated images
    tidying up

Testing times:
    intro to django testing
    testing forms
    testing the about form
    testing views: setting up our mock data
    testing views: GET set go
    testing views: going POSTal